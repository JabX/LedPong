C51 COMPILER V9.50a   LEDPONG                                                              11/28/2014 15:06:14 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE LEDPONG
OBJECT MODULE PLACED IN LedPong.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe LedPong.c DB OE BR INCDIR(C:\Program Files (x86)\SiLabs\MCU\Inc)

line level    source

   1          #include <c8051f310.h>
   2          #include <stdlib.h>
   3          
   4          // SFR16 definitions
   5          sfr16 TMR2RL   = 0xca;                    // Timer2 reload value
   6          sfr16 TMR2     = 0xcc;                    // Timer2 counter
   7          
   8          // Same clock, same data for all 4 panels, but different loads
   9          sbit CLK        = P0^0;
  10          sbit DATA       = P1^0;
  11          sbit LOAD1      = P1^3;
  12          sbit LOAD2      = P1^4;
  13          sbit LOAD3      = P1^1;
  14          sbit LOAD4      = P1^2;
  15          
  16          sbit J1UP       = P2^1;
  17          sbit J1DOWN     = P2^0;
  18          sbit J2UP       = P2^3;
  19          sbit J2DOWN     = P2^2;
  20          
  21          xdata char m[16][16];   // Matrix
  22          int isFrame = 0;                // True : draw frame
  23          
  24          int paddleL;
  25          int paddleR;
  26          int paddleSize = 2;             // True size = 1 + 2*paddleSize
  27          
  28          char scoreL[8] = (0, 0, 0, 0, 0, 0, 0, 0);
  29          char scoreR[8] = (0, 0, 0, 0, 0, 0, 0, 0);
  30          
  31          int ball[2] = (40, 4);          // *10 in order to have subpositions for the ball, without using floats (10 subpos
             -itions per led)
  32          int ballXway = 1;
  33          int ballYway = 1;
  34          int angle = 0;          // not a real angle, juste an Y movement at each frame
  35          
  36          unsigned char init;             // Byte iterator
  37          int i;                                  // Int iterator
  38          int j;                                  // Int iterator
  39          
  40          
  41          void drawPaddle(int, int);
  42          
  43          void clearBall();
  44          void moveBall();
  45          void drawBall();
  46          void incScore(char[8]);
  47          void drawScore();
  48          
  49          void initMIC();
  50          
  51          void initTimer2(int);
  52          void timer2_ISR();
  53          
  54          void initDisplay();
C51 COMPILER V9.50a   LEDPONG                                                              11/28/2014 15:06:14 PAGE 2   

  55          void clearDisplay();
  56          
  57          void clearMatrix();
  58          void displayMatrix();
  59          
  60          // Matrices definition
  61          //      3       4
  62          //              1       2
  63          
  64          void writeData(int, unsigned char, unsigned char);      // Set all LEDs on matrix 'int'
  65          void sendDataAll(unsigned char, unsigned char);         // Send a non-LED message to all matrixes
  66          void sendData1(unsigned char, unsigned char, int);
  67          void sendData2(unsigned char, unsigned char, int);
  68          void sendData3(unsigned char, unsigned char, int);
  69          void sendData4(unsigned char, unsigned char, int);
  70          void sendData(unsigned char, unsigned char, int);
  71          
  72          
  73          void main()
  74          {
  75   1              initTimer2(65535);
  76   1              initMIC();
  77   1              initDisplay();
  78   1      
  79   1              paddleL = 7;
  80   1              paddleR = 7;
  81   1              angle = 3;
  82   1              while (1)
  83   1              {
  84   2                      if(isFrame)
  85   2                      {
  86   3                              isFrame = 0;
  87   3      
  88   3                              if(J1DOWN == 0 && paddleL > paddleSize)
  89   3                                      paddleL--;
  90   3                              if(J1UP == 0 && paddleL < 14 - paddleSize)
  91   3                                      paddleL++;
  92   3      
  93   3                              if(J2DOWN == 0 && paddleR > paddleSize)
  94   3                                      paddleR--;
  95   3                              if(J2UP == 0 && paddleR < 14 - paddleSize)
  96   3                                      paddleR++;
  97   3      
  98   3                              drawPaddle(0,0);
  99   3                              drawPaddle(1,15);
 100   3                              moveBall();
 101   3                              incScore(scoreL);
 102   3                              incScore(scoreR);
 103   3                              drawScore();
 104   3                              displayMatrix();
 105   3                      }
 106   2              }
 107   1      }
 108          
 109          ////////////////////
 110          //// Game logic ////
 111          ////////////////////
 112          
 113          void drawPaddle(int n, int col)
 114          {
 115   1              int paddle;
 116   1              int oobb;
C51 COMPILER V9.50a   LEDPONG                                                              11/28/2014 15:06:14 PAGE 3   

 117   1              int oobt;
 118   1      
 119   1              if(!n) paddle = paddleL; else paddle = paddleR;
 120   1      
 121   1              oobb = paddle - paddleSize - 1;
 122   1              oobt = paddle + paddleSize + 1;
 123   1      
 124   1              if(oobb < 0) oobb = 0;
 125   1              if(oobt > 14) oobt = 14;
 126   1      
 127   1              m[oobb][col] = 0;
 128   1              m[oobt][col] = 0;
 129   1      
 130   1              for(i = paddle - paddleSize; i <= paddle + paddleSize; i++)
 131   1                      m[i][col] = 1;
 132   1      }
 133          
 134          
 135          void clearBall()
 136          {
 137   1              m[(int)(ball[0]/10)][ball[1]] = 0;
 138   1      }
 139          
 140          void moveBall()
 141          {
 142   1              clearBall();
 143   1              // Test movements, no real collision yet
 144   1              if (ball[0] < 10)
 145   1                      ballXway = 1;
 146   1              else if (ball[0] > 140)
 147   1                      ballXway = -1;
 148   1              if (ball[1] < 1)
 149   1                      ballYway = 1;
 150   1              else if (ball[1] > 14)
 151   1                      ballYway = -1;
 152   1              ball[0] += ballXway*angle;
 153   1              ball[1] += ballYway;
 154   1              drawBall();
 155   1      }
 156          
 157          void drawBall()
 158          {
 159   1              m[(int)(ball[0]/10)][ball[1]] = 1;
 160   1      }
 161          
 162          void incScore(char score[8])
 163          {
 164   1              if(!score[1])
 165   1              {
 166   2                      int remainder = 1;
 167   2                      int digit = 7;
 168   2                      while (remainder)
 169   2                      {
 170   3                              if(score[digit] == 0)
 171   3                              {
 172   4                                      score[digit] = 1;
 173   4                                      remainder = 0;
 174   4                              }
 175   3                              else
 176   3                              {
 177   4                                      score[digit] = 0;
 178   4                                      digit--;
C51 COMPILER V9.50a   LEDPONG                                                              11/28/2014 15:06:14 PAGE 4   

 179   4                              }
 180   3                      }
 181   2              }
 182   1      }
 183          
 184          void drawScore()
 185          {
 186   1              for(j = 0; j < 8; j++)
 187   1              {
 188   2                      m[15][j] = scoreL[7-j];
 189   2                      m[15][j+8] = scoreR[j];
 190   2              }
 191   1      }
 192          
 193          /////////////////////
 194          //// LOWER-LEVEL ////
 195          /////////////////////
 196          
 197          void initMIC()
 198          {
 199   1              PCA0MD  &= ~0x40;       // Turn off watchdog
 200   1      
 201   1              OSCICN   = 0xc3;        // Configure internal oscillator for its lowest frequency
 202   1              RSTSRC   = 0x04;        // Enable missing clock detector
 203   1      
 204   1              XBR1     = 0x40;        // Enable crossbar
 205   1              P0MDOUT |= 0x01;        // Push-pull for P0.0
 206   1              P1MDOUT |= 0x1F;        // Push-pull for P1.0 -> P1.4
 207   1      
 208   1              EA = 1;                         // Enable interruptions
 209   1      }
 210          
 211          void initDisplay()
 212          {
 213   1              CLK     = 0;
 214   1              DATA    = 0;
 215   1              LOAD1   = 0;
 216   1              LOAD2   = 0;
 217   1              LOAD3   = 0;
 218   1              LOAD4   = 0;
 219   1      
 220   1              sendDataAll(0x0C, 0x00);        // Shutdown
 221   1              sendDataAll(0x0F, 0x00);        // Normal operation mode
 222   1              sendDataAll(0x0C, 0x01);        // Normal operation mode
 223   1              sendDataAll(0x0A, 0x0F);        // Intensity
 224   1              sendDataAll(0x0B, 0x07);        // No scan limit
 225   1              sendDataAll(0x09, 0x00);        // No decode
 226   1      
 227   1              clearDisplay();
 228   1      }
 229          
 230          
 231          void clearMatrix()
 232          {
 233   1              for(i = 0; i <= 16; i++)
 234   1                      for(j = 0; j <= 16; j++)
 235   1                              m[i][j] = 0;
 236   1      }
 237          
 238          void clearDisplay()
 239          {
 240   1              clearMatrix();
C51 COMPILER V9.50a   LEDPONG                                                              11/28/2014 15:06:14 PAGE 5   

 241   1              displayMatrix();
 242   1      }
 243          
 244          void displayMatrix()
 245          {
 246   1              int k;
 247   1              unsigned char a;
 248   1              unsigned char d;
 249   1              unsigned char b;
 250   1      
 251   1              for (i = 0; i < 16; i++)
 252   1              {
 253   2                      k = (i % 8) + 1;
 254   2                      a = '0' + k;
 255   2      
 256   2                      // Left matrixes
 257   2                      d = 0x00;
 258   2                      b = 0x80;
 259   2                      for (j = 0; j < 8; j++)
 260   2                      {
 261   3                              if(m[i][j])
 262   3                                      d |= b;
 263   3                              b = b >> 1;
 264   3                      }
 265   2                      if(i < 8)
 266   2                              writeData(1, a, d);
 267   2                      else
 268   2                              writeData(3, a, d);
 269   2      
 270   2                      // Right matrixes
 271   2                      d = 0x00;
 272   2                      b = 0x80;
 273   2                      for (j = 8; j < 16; j++)
 274   2                      {
 275   3                              if(m[i][j])
 276   3                                      d |= b;
 277   3                              b = b >> 1;
 278   3                      }
 279   2                      if(i < 8)
 280   2                              writeData(2, a, d);
 281   2                      else
 282   2                              writeData(4, a, d);
 283   2              }
 284   1      }
 285          
 286          void writeData(int n, unsigned char a, unsigned char d)
 287          {
 288   1              switch(n)
 289   1              {
 290   2              case 1:
 291   2                      sendData1(a, d, 1);
 292   2                      break;
 293   2              case 2:
 294   2                      sendData2(a, d, 1);
 295   2                      break;
 296   2              case 3:
 297   2                      sendData3(a, d, 1);
 298   2                      break;
 299   2              case 4:
 300   2                      sendData4(a, d, 1);
 301   2                      break;
 302   2              }
C51 COMPILER V9.50a   LEDPONG                                                              11/28/2014 15:06:14 PAGE 6   

 303   1      }
 304          
 305          void sendDataAll(unsigned char a, unsigned char d)
 306          {
 307   1              sendData1(a, d, 0);
 308   1              sendData2(a, d, 0);
 309   1              sendData3(a, d, 0);
 310   1              sendData4(a, d, 0);
 311   1      }
 312          
 313          void sendData1(unsigned char a, unsigned char d, int isLine)
 314          {
 315   1              LOAD1 = 0;
 316   1              sendData(a, d, isLine);
 317   1              LOAD1 = 1;
 318   1      }
 319          
 320          void sendData2(unsigned char a, unsigned char d, int isLine)
 321          {
 322   1              LOAD2 = 0;
 323   1              sendData(a, d, isLine);
 324   1              LOAD2 = 1;
 325   1      }
 326          
 327          void sendData3(unsigned char a, unsigned char d, int isLine)
 328          {
 329   1              LOAD3 = 0;
 330   1              sendData(a, d, isLine);
 331   1              LOAD3 = 1;
 332   1      }
 333          
 334          void sendData4(unsigned char a, unsigned char d, int isLine)
 335          {
 336   1              LOAD4 = 0;
 337   1              sendData(a, d, isLine);
 338   1              LOAD4 = 1;
 339   1      }
 340          
 341          void sendData(unsigned char a, unsigned char d, int isLine)
 342          {
 343   1              unsigned char b;
 344   1              unsigned char p;
 345   1      
 346   1              EA = 0;
 347   1              CLK = 0;
 348   1      
 349   1              for(b=0x80; b>0; b=b>>1)
 350   1              {
 351   2                      DATA = (a&b)?1:0;
 352   2                      CLK = 1;
 353   2                      CLK = 0;
 354   2              }
 355   1      
 356   1              if(isLine)
 357   1              {
 358   2                      p = (d&0x01);
 359   2                      d >>= 1;
 360   2                      d &= 0x7F;
 361   2                      if(p) d |= 0x80;
 362   2              }
 363   1      
 364   1              for(b=0x80; b>0; b=b>>1)
C51 COMPILER V9.50a   LEDPONG                                                              11/28/2014 15:06:14 PAGE 7   

 365   1              {
 366   2                      DATA = (d&b)?1:0;
 367   2                      CLK = 1;
 368   2                      CLK = 0;
 369   2              }
 370   1      
 371   1              EA = 1;
 372   1      }
 373          
 374          void initTimer2(int counts)
 375          {
 376   1              TMR2CN = 0x00;
 377   1              CKCON  &= ~0x60;
 378   1              TMR2RL = -counts;
 379   1              TMR2   = 0xffff;
 380   1              ET2    = 1;
 381   1              TR2    = 1;
 382   1      }
 383          
 384          void timer2_ISR() interrupt 5
 385          {
 386   1              TF2H = 0;
 387   1              isFrame = 1;
 388   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1509    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    256    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     39      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
